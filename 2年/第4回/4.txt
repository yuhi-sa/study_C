プログラミング演習２レポート課題（第4回）
B162392 佐伯 雄飛

課題１
（プログラム）
4-1-1.c
     1	#include<stdio.h>
     2	/*クイックソート*/
     3	#define N 50000
     4	void quick_sort(int *ary, int begin, int end){
     5	int i, j, work, pivot;
     6	pivot = ary[(begin + end)/2];
     7	i=begin;
     8	j=end;
     9	while(1){
    10	  while(ary[i] < pivot) ++i;
    11	  while(ary[j] > pivot) --j;
    12	  if(i >= j)break;
    13	  work = ary[i];
    14	  ary[i] = ary[j];
    15	  ary[j] = work;
    16	  i++;
    17	  j--;
    18	}
    19	if(begin <i-1)quick_sort(ary, begin, i-1);
    20	if(j+1<end)quick_sort(ary, j+1, end );
    21	}
    22	
    23	void print_array(int*ary, int size){
    24	  int i;
    25	  for(i=0; i<size; ++i)
    26	    printf("%d ", ary[i]);
    27	    printf("\n\n");
    28	}
    29	
    30	int main(){
    31	  FILE *fp;
    32	  int ary[N];
    33	  int i;
    34	  fp=fopen("b.txt", "r");
    35	  for(i=0; i<N; i++)
    36	   fscanf(fp, "%d", &ary[i]);
    37	   fclose(fp);
    38	  print_array(ary, N);
    39	   quick_sort(ary, 0, N-1);
    40	  print_array(ary, N);
    41	  return 0;
    42	}

4-1-2.c
     1	#include<stdio.h>
     2	#include<stdlib.h>
     3	#include<string.h>
     4	/*バブルソート*/
     5	#define N 50000
     6	void bubble_sort(int n, int*a){
     7	int i, j, tmp;
     8	for(i=1;i<n;i++){
     9	for(j=n-1;j>=i;j--){
    10	if(a[j-1] > a[j]){
    11	    tmp = a[j-1];
    12	    a[j-1] = a[j];
    13	    a[j] = tmp;
    14	                  }
    15	                    }
    16	                }
    17	                                }
    18	 void print_array(int*ary, int size){
    19	  int i;
    20	  for(i=0; i<size; ++i)
    21	    printf("%d ", ary[i]);
    22	    printf("\n\n");
    23	}
    24	           
    25	
    26	int main(){
    27	  FILE *fp;
    28	  int ary[N];
    29	  int i;
    30	  fp=fopen("b.txt", "r");
    31	  for(i=0; i<N; i++)
    32	   fscanf(fp, "%d", &ary[i]);
    33	   fclose(fp);
    34	  print_array(ary, N);
    35	   bubble_sort(N ,ary);
    36	  print_array(ary, N);
    37	  return 0;
    38	}

4-1-3.c
     1	#include<stdio.h>
     2	#include<stdlib.h>
     3	#include<time.h>
     4	
     5	int main(){
     6		int i, a,b,c,d;
     7		printf("生成する個数\n");
     8		scanf("%d", &b);
     9		printf("値の範囲\n");
    10		printf("以上\n");
    11		scanf("%d", &c);
    12		printf("未満\n");
    13		scanf("%d", &d);
    14		srand((unsigned) time(NULL));
    15		
    16		FILE*fp;
    17		fp=fopen("b.txt","w");
    18		for(i=0; i<b-1; i++){
    19		a=(int)((rand()/((double)RAND_MAX+1.0))*(d-c));
    20		fprintf(fp, "%d\n", a);
    21		}
    22		return 0;
    23	}

（説明）
4-1-1.cは、b.txtからデータを読み取りクイックソートするプログラム
4-1-2.cは、b.txtからデータを読み取りバブルソートするプログラム
4-1-3.cは、指定した個数、指定した範囲で乱数を生成してb.txtに書き込むプログラム
である。
（実行結果）
10000のとき
4-1-1.c(クイックソート)
real	0m0.248s
user	0m0.016s
sys	0m0.008s
4-1-2.c(バブルソート)
real	0m0.725s
user	0m0.520s
sys	0m0.004s

25000のとき
4-1-1.c(クイックソート)
real	0m0.662s
user	0m0.044s
sys	0m0.000s
4-1-2.c(バブルソート)
real	0m3.742s
user	0m3.188s
sys	0m0.000s

50000のとき
4-1-1.c(クイックソート)
real	0m1.276s
user	0m0.076s
sys	0m0.008s
4-1-2.c(バブルソート)
real	0m16.451s
user	0m15.220s
sys	0m0.004s

クイックソートよりバブルソートの方が要素数が増えれば増えるほど計算の数も
多くなるので、要素数が増えれば増えるほど時間の差が広がる


課題２
（プログラム）
     1	#include<stdio.h>
     2	/*クイックソート*/
     3	#define N 10
     4	void quick_sort(int *ary, int begin, int end){
     5	int i, j, work, pivot;
     6	pivot = ary[(begin + end)/2];
     7	i=begin;
     8	j=end;
     9	while(1){
    10	  while(ary[i] < pivot) ++i;
    11	  while(ary[j] > pivot) --j;
    12	  if(i >= j)break;
    13	  work = ary[i];
    14	  ary[i] = ary[j];
    15	  ary[j] = work;
    16	  i++;
    17	  j--;
    18	}
    19	if(begin <i-1)quick_sort(ary, begin, i-1);
    20	if(j+1<end)quick_sort(a     1	#include<stdio.h>
     2	#define N 10
     3	
     4	int rbinsearch(int *ary, int head, int tail, int key){
     5	  int mid = (head + tail) /2;
     6	  if(head >tail) return -1;
     7	  if(key < ary[mid])
     8	        return rbinsearch(ary, head, mid-1, key);
     9	  else if(key > ary[mid])
    10	    return rbinsearch(ary, mid+1, tail, key);
    11	  else return mid;
    12	}
    13	
    14	int main(){
    15	    FILE *fp;
    16	    int ary[N];
    17	    int i, x, idx;
    18	    
    19	    fp =fopen("b.txt", "r");
    20	    
    21	    for(i=0;i<N;i++)
    22	          fscanf(fp, "%d" ,&ary[i]);
    23	    fclose(fp);
    24	    
    25	    printf("Input number: ");
    26	    scanf("%d" , &x);
    27	    idx = rbinsearch(ary, 0, N-1, x);
    28	    if(idx != -1)
    29	      printf("%dは添字%d番目に見つかりました。\n", x, idx);
    30	    else
    31	      printf("%dは見つかりませんでした。\n", x);
    32	      return 0;
    33	}
ry, j+1, end );
    21	}
    22	
    23	void print_array(int*ary, int size){
    24	  int i;
    25	  for(i=0; i<size; ++i)
    26	    printf("%d ", ary[i]);
    27	    printf("\n\n");
    28	}
    29	
    30	int main(){
    31	  FILE *fp;
    32	  int ary[N];
    33	  int i;
    34	  fp=fopen("b.txt", "r");
    35	  for(i=0; i<N; i++)
    36	   fscanf(fp, "%d", &ary[i]);
    37	   fclose(fp);
    38	  print_array(ary, N);
    39	   quick_sort(ary, 0, N-1);
    40	  print_array(ary, N);
    41	  return 0;
    42	}

（説明）
まず、全体の中から基準となる要素を一つ選択する
このプログラムでは(begin + end)/2
次に、基準以下の要素と基準以上の要素とに分割する
分割された２つの要素郡については、更にその中で分割
これを繰り返す
5 10 2 6 3 8 4 1 7 9 
5と1を入れ替え
1 10 2 6 3 8 4 5 7 9 
10と3を入れ替え
1 3 2 6 10 8 4 5 7 9 
3と2を入れ替え
1 2 3 6 10 8 4 5 7 9 
4と6を入れ替え
1 2 3 4 10 8 6 5 7 9 
10と5を入れ替え
1 2 3 4 5 8 6 10 7 9 
8と6を入れ替え
1 2 3 4 5 6 8 10 7 9 
10と9を入れ替え
1 2 3 4 5 6 8 9 7 10 
9と7を入れ替え
1 2 3 4 5 6 8 7 9 10 
8と7を入れ替え
1 2 3 4 5 6 7 8 9 10 
要素が一つ一つバラバラな状態になったので終了
1 2 3 4 5 6 7 8 9 10 

(実行結果)
b162392@imc2e-022:/fs/home/b162392$ ./a.out
5 10 2 6 3 8 4 1 7 9 

1 2 3 4 5 6 7 8 9 10 

課題３
（プログラム）
     1	#include<stdio.h>
     2	#define N 10
     3	
     4	int rbinsearch(int *ary, int head, int tail, int key){
     5	  int mid = (head + tail) /2;
     6	  if(head >tail) return -1;
     7	  if(key < ary[mid])
     8	        return rbinsearch(ary, head, mid-1, key);
     9	  else if(key > ary[mid])
    10	    return rbinsearch(ary, mid+1, tail, key);
    11	  else return mid;
    12	}
    13	
    14	int main(){
    15	    FILE *fp;
    16	    int ary[N];
    17	    int i, x, idx;
    18	    
    19	    fp =fopen("b.txt", "r");
    20	    
    21	    for(i=0;i<N;i++)
    22	          fscanf(fp, "%d" ,&ary[i]);
    23	    fclose(fp);
    24	    
    25	    printf("Input number: ");
    26	    scanf("%d" , &x);
    27	    idx = rbinsearch(ary, 0, N-1, x);
    28	    if(idx != -1)
    29	      printf("%dは添字%d番目に見つかりました。\n", x, idx);
    30	    else
    31	      printf("%dは見つかりませんでした。\n", x);
    32	      return 0;
    33	}

（説明）
まず、配列の中央にある要素を調べる
１、もし目的の値と等しければ、その位置を返す
２、もし目的の値と異なっていれば、目的の値と
　　その位置にある値との大小関係を元に、
　　配列の前半あるいは後半だけを調べる
　　
　一番目と十番目の中央は5番目の15
　15は29より小さいので六番目から十番目で再帰させる
　六番目と十番目の中央は八番目の30
  30は29より大きいので六番目から六番目で再帰させ
  ６番目に29があることがわかる

（実行結果）
b162392@imc2e-022:/fs/home/b162392$ ./a.out
Input number: 29
29は添字6番目に見つかりました。




